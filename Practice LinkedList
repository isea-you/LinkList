public class LinkList<E>{
	private class Node{
		public E e;
		public Node next;
		
		public Node(E e,Node next){
			this.e = e;
			this.next = next;
		}
		
		public Node(E e){
			this(e,null);
		}
		
		public Node(){
			this(null,null);
		}
		
		@Override
		public String toString(){
			return e.toString();
		}
	}
	
	private Node dummyHead;
	private int size;
	
	public LinkList(){
		dummyHead = new Node();
		size = 0;
	}
	
	public int getSize(){
		return size;
	}
	
	public boolean isEmpty(){
		return size == 0;
	}
	
	public void add(int index,E e){
		if(index < 0 || index > size){
			throw new IllegalArgumentException("Add failed,illegal index");
		}
		
		Node pre = dummyHead;
		for(int i = 0 ; i < index ; i ++){
			pre = pre.next;
		}
		pre.next = new Node(e,pre.next);
		size ++;
	}
	
	public void addFirst(E e){
		add(0,e);
	}
	
	public void addLast(E e){
		add(size, e);
	}
	
	public Node remove(int index){
		if(index >=size || index < 0){
			 throw new IlleagalArgumentException("Remove failed. index is illegal");
		}
		Node pre = dummyHead.next;
		for(int i = 0 ; i < index ; i ++){
			pre = pre.next;
		}
		
		Node retNode = pre.next;
		pre.next = retNode.next;
		retNode.next = null;
		size --;
		
		return retNode;
	}
	
	public void removeFirst(){
		remove(0);
	}
	
	publci void removeLast(){
		remove(size -1);
	}
	
	public Node get(int index){
		if(index < 0 || index >= size){
			throw new IllegalArgumentException("Get failed index is illegal");
		}
		Node cur = dummyHead.next;
		for(int i = 0 ; i < index ; i ++){
			cur = cur.next;
		}
		
		return cur.e;
	}
	
	public Node set(int index,E e){
		if(index < 0 || index >= size){
			throw new IllegalArgumentException("set failed,index is illegal");
		}
		
		Node cur = dummyHead.next;
		for(int i = 0 ; i < index ; i ++){
			cur = cur.next;
		}
		
		cur.e = e;
	}
	
	public boolean contains(E e){
		Node cur = dummyHead;
		while(cur != null){
			if(cur.e.equals(e)){
				return ture;
			}
			cur = cur.next;
		}
		return false;
	}
		
	@Override
	public String toString(){
		StringBuffer res = new StringBuffer();
		Node cur = dummyHead.next;
		while(cur != null){
			res.append(cur + "->");
			cur = cur.next;
		}
		res.append("NULL");
		return res.toString();
	}
}
